#lang racket

(define (cont-frac n d k)
  (define (iter n d k result)
  (if (= k 0)
      result
      (iter n d (- k 1) (/ (n k) (+ (d k) result)))))
  
  (iter n d k 0))


(define (e n)
  (define (d k)
    (if (= (remainder k 3) 2)
        (* (/ (+ k 1) 3) 2)
        1))
  
  (cont-frac (lambda (x) 1) d n))


(- (e 1) 0.718281828459045)
(- (e 2) 0.718281828459045)
(- (e 3) 0.718281828459045)
(- (e 4) 0.718281828459045)
(- (e 5) 0.718281828459045)
(- (e 6) 0.718281828459045)
(- (e 7) 0.718281828459045)
(- (e 8) 0.718281828459045)
(- (e 9) 0.718281828459045)
(- (e 10) 0.718281828459045)
(- (e 11) 0.718281828459045)
(- (e 12) 0.718281828459045)
(- (e 13) 0.718281828459045)
(- (e 14) 0.718281828459045)
(- (e 15) 0.718281828459045)
(- (e 16) 0.718281828459045)