#lang racket

(define (inc n) (+ n 1))

(define (simpson-integral f a b n)
  (define h (/ (- b a) n))
  (define (simpson-term k)
    (define y (f (+ a (* k h))))
    (*
     (cond ((or (= k 0) (= k n)) 1)
           ((even? k) 2)
           (else 4)) 
     y))

  (* (/ h 3) (sum simpson-term 0 inc n)))

(define (cube x)
  (* x x x))

(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2)) add-dx b) dx))

(define (sum term a next b)
  (cond ((> a b) 0)
        (else (+ (term a) (sum term (next a) next b)))))



(simpson-integral cube 0 1 100)
(simpson-integral cube 0 1 1000)
(integral cube 0 1 0.01)
(integral cube 0 1 0.001)