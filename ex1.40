#lang racket

(define (cubic a b c)
  (define (cube x) (* x x x))
  (lambda (x) (+ (cube x) (* a (sqr x)) (* b x) c)))


(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define tolerance 0.00001)

(define (newton-transform g)
  (lambda (x)
    (- x (/ (f x) ((derivative f) x)))))

(define (derivative f)
  (let ((dx 0.00001))
    (lambda (x)
      (/ (- (f (+ x dx)) (f x))
         dx))))


((cubic 1 2 3) (newtons-method (cubic 1 2 3) 1))
((cubic 45 56 78) (newtons-method (cubic 45 56 78) 1))