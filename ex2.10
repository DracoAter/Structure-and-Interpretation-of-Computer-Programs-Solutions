#lang racket

(define (div-interval x y)
  (cond ((in 0 y) (display "division by zero") (newline))
        (else (mul-interval x
                      (make-interval (/ 1.0 (upper-bound y))
                                     (/ 1.0 (lower-bound y)))))))

(define (in number interval)
  (and (>= number (lower-bound interval))
       (<= number (upper-bound interval))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (make-interval a b) (cons a b))

(define (upper-bound interval)
  (cdr interval))

(define (lower-bound interval)
  (car interval))

;test
(define a (make-interval 1 5))
(define b (make-interval -3 1))
(define c (make-interval -6 -2))
(define d (make-interval -1 0))

(div-interval a b);ERROR
(div-interval b c);(-0.5,1.5)
(div-interval c d);ERROR
(div-interval d a);(-1,0)