#lang racket

(define (unique-pairs number)
  (if (= 1 number)
      null
      (append (unique-pairs (- number 1))
              (map (lambda (x) (cons x number)) 
                   (enumerate-interval 1 (- number 1))))))

(define (enumerate-interval low high)
  (if (> low high)
      null
      (cons low (enumerate-interval (+ low 1) high))))

(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum?
               (unique-pairs n))))

(define (flatmap proc seq)
  (accumulate append null (map proc seq)))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (make-pair-sum pair)
  (list (car pair) (cdr pair) (+ (car pair) (cdr pair))))


(define (prime-sum? pair)
  (prime? (+ (car pair) (cdr pair))))

(define (prime? num)
  (in? num (list 2 3 5 7 11 13 17)))

(define (in? num list)
  (if (null? list)
      false
      (or (= num (car list)) (in? num (cdr list)))))
      

;test
(unique-pairs 5);((2 1)(3 1)(3 2)(4 1)(4 2)(4 3)(5 1)(5 2)(5 3)(5 4))
(prime-sum-pairs 6);((2 1 3)(3 2 5)(4 1 5)(4 3 7)(5 2 7)(6 1 7)(6 5 11))