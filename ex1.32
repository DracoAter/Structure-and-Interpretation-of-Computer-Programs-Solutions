#lang racket
(require rackunit)

;recursive
(define (accumulate combiner null-value term a next b )
  (if (> a b)
      null-value
      (combiner (term a) 
                (accumulate combiner null-value term (next a) next b))))

;iterative
(define (accumulate combiner null-value term a next b )
  (define (iter a result)
    (if (> a b)
      result
      (iter (next a) (combiner result (term a)))))
  
  (iter a null-value))

(define (product term a next b)
  (accumulate * 1 term a next b))

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (self x) x)
(define (inc x) (+ x 1))

(check-= (product self 1 inc 1) 1 0)
(check-= (product self 1 inc 2) 2 0)
(check-= (product self 1 inc 3) 6 0)
(check-= (product self 1 inc 4) 24 0)
(check-= (product self 1 inc 5) 120 0)
(check-= (product self 1 inc 6) 720 0)

(check-= (sum self 1 inc 1) 1 0)
(check-= (sum self 1 inc 2) 3 0)
(check-= (sum self 1 inc 3) 6 0)
(check-= (sum self 1 inc 4) 10 0)
(check-= (sum self 1 inc 5) 15 0)
(check-= (sum self 1 inc 6) 21 0)
