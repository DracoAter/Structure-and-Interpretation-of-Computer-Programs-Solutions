#lang racket

(define (width-interval interval)
  (/ (- (upper-bound interval) (lower-bound interval)) 2))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (make-interval a b) (cons a b))

(define (upper-bound interval)
  (cdr interval))

(define (lower-bound interval)
  (car interval))

;test
(define a (make-interval 1 5))
(define b (make-interval -3 1))
(define c (make-interval -6 -2))
(define d (make-interval -1 0))

(= (+ (width-interval a) (width-interval b)) 
   (width-interval (sub-interval a b)));(0,8)
(= (+ (width-interval b) (width-interval c)) 
   (width-interval (sub-interval b c)));(-1,7)
(= (+ (width-interval c) (width-interval d)) 
   (width-interval (add-interval c d)));(-7,-2)
(= (+ (width-interval d) (width-interval a)) 
   (width-interval (add-interval d a)));(0,5)

(* (width-interval a) (width-interval b))
(mul-interval a b)