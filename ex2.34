#lang racket

(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms) 
                (+ this-coeff (* x higher-terms)))
              0
              coefficient-sequence))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))


(horner-eval 2 (list 1 3));1 + 3*2 = 7
(horner-eval 2 (list 1 3 0 5));7 + 2^3 * 5 = 47
(horner-eval 2 (list 1 3 0 5 0 1)); 47 + 2^5 = 79