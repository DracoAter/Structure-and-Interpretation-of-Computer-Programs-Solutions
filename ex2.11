#lang racket

(define (mul-interval x y)
  (let ((lx (lower-bound x))
        (ly (lower-bound y))
        (ux (upper-bound x))
        (uy (upper-bound y)))
    (cond ((>= lx 0) 
           (cond ((>= ly 0) (make-interval (* lx ly) (* ux uy)))
                 ((<= uy 0) (make-interval (* ux ly) (* lx uy)))
                 (else (make-interval (* ux ly) (* ux uy)))))
          ((<= ux 0) 
           (cond ((>= ly 0) (make-interval (* lx uy) (* ux ly)))
                 ((<= uy 0) (make-interval (* ux uy) (* lx ly)))
                 (else (make-interval (* lx uy) (* lx ly)))))
          (else 
           (cond ((>= ly 0) (make-interval (* lx uy) (* ux uy)))
                 ((<= uy 0) (make-interval (* ux ly) (* lx ly)))
                 (else (make-interval (min (* lx uy) (* ux ly))
                                      (max (* ux uy) (* lx ly)))))))))


(define (make-interval a b) (cons a b))

(define (upper-bound interval)
  (cdr interval))

(define (lower-bound interval)
  (car interval))

;test
(define a (make-interval 1 5))
(define b (make-interval -3 1))
(define c (make-interval -6 -2))
(define d (make-interval -1 0))

(mul-interval a a);(1,25)
(mul-interval a c);(-30,-2)
(mul-interval a b);(-15,5)

(mul-interval c a);(-30,-2)
(mul-interval c c);(4,36)
(mul-interval c b);(-6,18)

(mul-interval b a);(-15,5)
(mul-interval b c);(-6,18)
(mul-interval b b);(-3,9)

(mul-interval c d);(0,6)
(mul-interval d a);(-5,0)