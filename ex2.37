#lang racket

(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))

(define (transpose mat)
  (accumulate-n cons null mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row) (matrix-*-vector cols row)) m)))

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      null
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))


;test
(define a (list 1 2 3 4))
(define b (list 5 6 7 8))
(define c (list 9 10 11 12))
(define x (list a b c))

(dot-product a b);70
(matrix-*-vector x b);(70 174 278) = (ab bb bc)
(transpose x);((1 5 9)(2 6 10)(3 7 11)(4 8 12))
(matrix-*-matrix x (transpose x));((30 70 110)(70 174 278)(110 278 446))