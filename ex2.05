#lang racket

(define (cons x y)
  (* (expt 2 x) (expt 3 y)))

(define (car z)
  (if (= 0 (remainder z 2))
      (+ 1 (car (/ z 2)))
      0))

(define (cdr z)
  (if (= 0 (remainder z 3))
      (+ 1 (cdr (/ z 3)))
      0))

;test
(define x 5)
(define y 10)

(= x (car (cons x y)))
(= y (cdr (cons x y)))

(= 0 (car (cons 0 0)))
(= 0 (cdr (cons 0 0)))
