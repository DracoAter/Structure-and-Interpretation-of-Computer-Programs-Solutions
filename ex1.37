#lang racket

(require rackunit)

;iterative
(define (cont-frac n d k)
  (define (iter k result)
  (if (= k 0)
      result
      (iter (- k 1) (/ (n k) (+ (d k) result)))))
  
  (iter k 0))

;recursive
(define (cont-fracr n d k)
  (define (recur i)
    (if (= k i)
      0
      (+  (/ (n k) (+ (d k) (recur (+ i 1)))))))
  
  (recur 1))

(/ 1 (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 100))


(check-= (cont-frac (lambda (i) 1.0)
                    (lambda (i) 1.0)
                    11)
         (/ 2 (+ 1 (sqrt 5))) 0.00009)
         