#lang racket

(define (root n x)
  (fixed-point 
   ((repeated average-damp (floor (log2 n))) 
    (lambda (y) (/ x (expt y (- n 1))))) 1.0))

(define (log2 x)
  (/ (log x) (log 2)))

(define (average x y)
  (/ (+ x y) 2.0))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (let ((delta 0.000001))
      (< (abs (- v1 v2)) delta)))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  
  (try first-guess))

(define (repeated f n)
  (define (iter f n result)
    (if (= n 0)
        result
        (iter f (- n 1) (f result))))
  
  (lambda (x) (iter f n x)))


(root 2 4)
(root 3 8)
(root 4 16)
(root 5 32)
(root 6 64)
(root 7 128)
(root 8 256)
(root 9 512)
(root 10 1024)
(root 3 27)
(root 4 81)