#lang racket

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))

(define (make-center-percent c p)
  (make-center-width c (* c p 0.01)))

(define (div-interval x y)
  (cond ((in 0 y) (display "division by zero") (newline))
        (else (mul-interval x
                            (make-interval (/ 1.0 (upper-bound y))
                                           (/ 1.0 (lower-bound y)))))))

(define (mul-interval x y)
  (let ((lx (lower-bound x))
        (ly (lower-bound y))
        (ux (upper-bound x))
        (uy (upper-bound y)))
    (cond ((>= lx 0) 
           (cond ((>= ly 0) (make-interval (* lx ly) (* ux uy)))
                 ((<= uy 0) (make-interval (* ux ly) (* lx uy)))
                 (else (make-interval (* ux ly) (* ux uy)))))
          ((<= ux 0) 
           (cond ((>= ly 0) (make-interval (* lx uy) (* ux ly)))
                 ((<= uy 0) (make-interval (* ux uy) (* lx ly)))
                 (else (make-interval (* lx uy) (* lx ly)))))
          (else 
           (cond ((>= ly 0) (make-interval (* lx uy) (* ux uy)))
                 ((<= uy 0) (make-interval (* ux ly) (* lx ly)))
                 (else (make-interval (min (* lx uy) (* ux ly))
                                      (max (* ux uy) (* lx ly)))))))))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (make-interval a b) (cons a b))

(define (upper-bound interval)
  (cdr interval))

(define (lower-bound interval)
  (car interval))

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (in number interval)
  (and (>= number (lower-bound interval))
       (<= number (upper-bound interval))))


;test
(define a (make-center-percent 1000 5))
(define b (make-center-percent 100 1))

(par1 a b)
(par2 a b)

