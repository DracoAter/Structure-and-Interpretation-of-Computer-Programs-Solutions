#lang racket
(require rackunit)


(define delta 0.00000001)

(define (iterative-improve good-enough? f)
  (define (iter guess) 
    (let ((next (f guess)))
      (if (good-enough? guess next)
          next
          (iter next))))
  iter)

(define (fixed-point f first-guess)
  ((iterative-improve close-enough? f) first-guess))

(define (sqrt x)
  ((iterative-improve close-enough? 
                      (lambda (y) (average y (/ x y)))) 1.0))

(define (average x y)
  (/ (+ x y) 2.0))

(define (close-enough? v1 v2)
  (< (abs (- v1 v2)) delta))


(sqrt 4)
(sqrt 9)
(sqrt 16)
(sqrt 25)
(sqrt 36)
(sqrt 49)


(check-= (fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0) (/ (+ 1 (sqrt 5)) 2) delta)
(check-= (fixed-point cos 1.0) 0.73908513 delta)