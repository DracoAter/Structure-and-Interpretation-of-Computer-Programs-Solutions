#lang racket
(require rackunit)


(define (fib n) (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   (+ (sqr q) (sqr p))
                   (+ (* 2 p q) (sqr q))
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))


(check-= (fib 0) 0 0)
(check-= (fib 1) 1 0)
(check-= (fib 2) 1 0)
(check-= (fib 3) 2 0)
(check-= (fib 4) 3 0)
(check-= (fib 5) 5 0)
(check-= (fib 6) 8 0)
(check-= (fib 7) 13 0)
(check-= (fib 8) 21 0)
(check-= (fib 9) 34 0)
(check-= (fib 10) 55 0)
(check-= (fib 11) 89 0)
(check-= (fib 12) 144 0)